{"ast":null,"code":"var _jsxFileName = \"/Users/christopher/Thinkful/chall/Project_Pomodoro_Timer_Qualified_1/src/TimerDisplay.js\";\nimport React from \"react\";\n\nfunction TimerDisplay({\n  session,\n  minutesToDuration,\n  secondsToDuration,\n  focusDuration,\n  breakDuration\n}) {\n  {\n    if (session) {\n      return (\n        /*#__PURE__*/\n\n        /* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */\n        React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"row mb-2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"col\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"h2\", {\n          \"data-testid\": \"session-title\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 15\n          }\n        }, session === null || session === void 0 ? void 0 : session.label, \" for\", \" \", (session === null || session === void 0 ? void 0 : session.label) === \"Focusing\" ? minutesToDuration(focusDuration) : minutesToDuration(breakDuration)), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"lead\",\n          \"data-testid\": \"session-sub-title\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 15\n          }\n        }, secondsToDuration(session === null || session === void 0 ? void 0 : session.timeRemaining), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"row mb-2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"col\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"progress\",\n          style: {\n            height: \"20px\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"progress-bar\",\n          role: \"progressbar\",\n          \"aria-valuemin\": \"0\",\n          \"aria-valuemax\": \"100\",\n          \"aria-valuenow\": \"0\" // TODO: Increase aria-valuenow as elapsed time increases\n          ,\n          style: {\n            width: \"0%\"\n          } // TODO: Increase width % as elapsed time increases\n          ,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 17\n          }\n        })))))\n      );\n    }\n  }\n}\n\nexport default TimerDisplay;","map":{"version":3,"sources":["/Users/christopher/Thinkful/chall/Project_Pomodoro_Timer_Qualified_1/src/TimerDisplay.js"],"names":["React","TimerDisplay","session","minutesToDuration","secondsToDuration","focusDuration","breakDuration","label","timeRemaining","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,YAAT,CAAsB;AACpBC,EAAAA,OADoB;AAEpBC,EAAAA,iBAFoB;AAGpBC,EAAAA,iBAHoB;AAIpBC,EAAAA,aAJoB;AAKpBC,EAAAA;AALoB,CAAtB,EAMG;AACD;AACE,QAAIJ,OAAJ,EAAa;AACX;AAAA;;AACE;AACA,+DACE;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AAAI,yBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGA,OADH,aACGA,OADH,uBACGA,OAAO,CAAEK,KADZ,UACuB,GADvB,EAEG,CAAAL,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEK,KAAT,MAAmB,UAAnB,GACGJ,iBAAiB,CAACE,aAAD,CADpB,GAEGF,iBAAiB,CAACG,aAAD,CAJvB,CADF,eAOE;AAAG,UAAA,SAAS,EAAC,MAAb;AAAoB,yBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGF,iBAAiB,CAACF,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEM,aAAV,CADpB,eAPF,CADF,CADF,eAcE;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AAAK,UAAA,SAAS,EAAC,UAAf;AAA0B,UAAA,KAAK,EAAE;AAAEC,YAAAA,MAAM,EAAE;AAAV,WAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AACE,UAAA,SAAS,EAAC,cADZ;AAEE,UAAA,IAAI,EAAC,aAFP;AAGE,2BAAc,GAHhB;AAIE,2BAAc,KAJhB;AAKE,2BAAc,GALhB,CAKoB;AALpB;AAME,UAAA,KAAK,EAAE;AAAEC,YAAAA,KAAK,EAAE;AAAT,WANT,CAM0B;AAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF,CADF,CAdF;AAFF;AAgCD;AACF;AACF;;AAED,eAAeT,YAAf","sourcesContent":["import React from \"react\";\n\nfunction TimerDisplay({\n  session,\n  minutesToDuration,\n  secondsToDuration,\n  focusDuration,\n  breakDuration,\n}) {\n  {\n    if (session) {\n      return (\n        /* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */\n        <>\n          <div className=\"row mb-2\">\n            <div className=\"col\">\n              <h2 data-testid=\"session-title\">\n                {session?.label} for{\" \"}\n                {session?.label === \"Focusing\"\n                  ? minutesToDuration(focusDuration)\n                  : minutesToDuration(breakDuration)}\n              </h2>\n              <p className=\"lead\" data-testid=\"session-sub-title\">\n                {secondsToDuration(session?.timeRemaining)} remaining\n              </p>\n            </div>\n          </div>\n          <div className=\"row mb-2\">\n            <div className=\"col\">\n              <div className=\"progress\" style={{ height: \"20px\" }}>\n                <div\n                  className=\"progress-bar\"\n                  role=\"progressbar\"\n                  aria-valuemin=\"0\"\n                  aria-valuemax=\"100\"\n                  aria-valuenow=\"0\" // TODO: Increase aria-valuenow as elapsed time increases\n                  style={{ width: \"0%\" }} // TODO: Increase width % as elapsed time increases\n                />\n              </div>\n            </div>\n          </div>\n        </>\n      );\n    }\n  }\n}\n\nexport default TimerDisplay;\n"]},"metadata":{},"sourceType":"module"}