{"ast":null,"code":"var _jsxFileName = \"/Users/christopher/Thinkful/chall/Project_Pomodoro_Timer_Qualified_1/src/TimerDisplay.js\";\nimport React from \"react\";\n\nfunction TimerDisplay({\n  session,\n  minutesToDuration,\n  secondsToDuration,\n  focusDuration,\n  breakDuration\n}) {\n  return (\n    /*#__PURE__*/\n\n    /* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 5\n      }\n    }, \"session && (\", /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }\n    }, session === null || session === void 0 ? void 0 : session.label, \" for\", \" \", (session === null || session === void 0 ? void 0 : session.label) === \"Focusing\" ? minutesToDuration(focusDuration) : minutesToDuration(breakDuration)), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }\n    }, secondsToDuration(session === null || session === void 0 ? void 0 : session.timeRemaining), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      style: {\n        height: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar\",\n      role: \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\",\n      \"aria-valuenow\": \"0\" // TODO: Increase aria-valuenow as elapsed time increases\n      ,\n      style: {\n        width: \"0%\"\n      } // TODO: Increase width % as elapsed time increases\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 15\n      }\n    }))))), \")\")\n  );\n}\n\nexport default TimerDisplay;","map":{"version":3,"sources":["/Users/christopher/Thinkful/chall/Project_Pomodoro_Timer_Qualified_1/src/TimerDisplay.js"],"names":["React","TimerDisplay","session","minutesToDuration","secondsToDuration","focusDuration","breakDuration","label","timeRemaining","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,YAAT,CAAsB;AACpBC,EAAAA,OADoB;AAEpBC,EAAAA,iBAFoB;AAGpBC,EAAAA,iBAHoB;AAIpBC,EAAAA,aAJoB;AAKpBC,EAAAA;AALoB,CAAtB,EAMG;AACD;AAAA;;AACE;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAEE,uDACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,qBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGJ,OADH,aACGA,OADH,uBACGA,OAAO,CAAEK,KADZ,UACuB,GADvB,EAEG,CAAAL,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEK,KAAT,MAAmB,UAAnB,GACGJ,iBAAiB,CAACE,aAAD,CADpB,GAEGF,iBAAiB,CAACG,aAAD,CAJvB,CADF,eAOE;AAAG,MAAA,SAAS,EAAC,MAAb;AAAoB,qBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGF,iBAAiB,CAACF,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEM,aAAV,CADpB,eAPF,CADF,CADF,eAcE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,SAAS,EAAC,cADZ;AAEE,MAAA,IAAI,EAAC,aAFP;AAGE,uBAAc,GAHhB;AAIE,uBAAc,KAJhB;AAKE,uBAAc,GALhB,CAKoB;AALpB;AAME,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OANT,CAM0B;AAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CAdF,CAFF;AAFF;AAoCD;;AAED,eAAeT,YAAf","sourcesContent":["import React from \"react\";\n\nfunction TimerDisplay({\n  session,\n  minutesToDuration,\n  secondsToDuration,\n  focusDuration,\n  breakDuration,\n}) {\n  return (\n    /* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */\n    <div>\n      session && (\n      <>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <h2 data-testid=\"session-title\">\n              {session?.label} for{\" \"}\n              {session?.label === \"Focusing\"\n                ? minutesToDuration(focusDuration)\n                : minutesToDuration(breakDuration)}\n            </h2>\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {secondsToDuration(session?.timeRemaining)} remaining\n            </p>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow=\"0\" // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: \"0%\" }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </>\n      )\n    </div>\n  );\n}\n\nexport default TimerDisplay;\n"]},"metadata":{},"sourceType":"module"}